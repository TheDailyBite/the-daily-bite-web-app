name: build

on: [push, pull_request]

# permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

env:
  DOCKERFILE_PATH: docker/Dockerfile
  IMAGE_TAG: latest
  AWS_REGION: us-west-1
  WWW_FRONTEND_BUCKET: www.the-daily-bite-web-app-frontend-dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v3
    - uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: |
          ${{ secrets.AGGREGATOR_DAL_CLONE_PRIVATE_KEY }}    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: make poetry-download

    - name: Set up cache
      uses: actions/cache@v3.3.1
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run style checks
      run: |
        make check-codestyle

    - name: Run tests
      run: |
        make test

    - name: Run safety checks
      run: |
        make check-safety

    - name: Build image
      run: |
        DOCKER_BUILDKIT=1 docker build --ssh default=${{ env.SSH_AUTH_SOCK }} -f ${{ env.DOCKERFILE_PATH }} .

  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]    
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: |
          ${{ secrets.AGGREGATOR_DAL_CLONE_PRIVATE_KEY }}         

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ vars.GH_ACTION_AWS_ROLE }}
        aws-region: ${{ env.AWS_REGION}}
        role-session-name: GithubWebAppWorkflowsSession

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.TDB_WEB_APP_ECR_REPO }}
      run: |
        DOCKER_BUILDKIT=1 docker build  --ssh default=${{ env.SSH_AUTH_SOCK }} -f ${{ env.DOCKERFILE_PATH }} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          
    
    - name: Push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.TDB_WEB_APP_ECR_REPO }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: make poetry-download

    - name: Set up cache
      uses: actions/cache@v3.3.1
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install        

    - name: Upload Frontend export to S3 bucket
      run: |
        # Store the search string and replacement string in variables
        search="__BACKEND_HOST__"
        replacement=${{ vars.TDB_WEB_APP_BACKEND_HOST }}
        echo "Replacing $search with $replacement..."
        # Specify the file path where you want to perform the replacement
        config_file_path="the_daily_bite_web_app/config.py"
        # Use sed to perform the search and replace operation on the file
        sed -i "s/$search/$replacement/g" "$config_file_path"
        # show the updated file
        cat "$config_file_path"
        source $(poetry env info --path)/bin/activate
        reflex init
        reflex export --frontend-only
        deactivate
        unzip -d frontend_unzipped frontend.zip
        aws s3 sync --delete frontend_unzipped s3://${{ env.WWW_FRONTEND_BUCKET }}
        rm -rf frontend_unzipped frontend.zip

    - name: Create Cloudfront Invalidation for distribution since S3 has changed
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.TDB_WEB_APP_FRONTEND_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"




